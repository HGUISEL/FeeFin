package ca.uwaterloo.ece.bicer;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.WrongReturnType;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternWrongReturnType {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	
    	int numOfTPs = 0;
    	
    	// TP src/java/org/apache/hadoop/hbase/util/Bytes.java	a6457d7c042a96ec4e807bcb2e7c73806a5cd78c
    	String projectName = "hbase";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "src/java/org/apache/hadoop/hbase/util/Bytes.java";
    	String shaId = "a6457d7c042a96ec4e807bcb2e7c73806a5cd78c~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP WrongReturnType	kafka	Alive	d0e436c471ba4122ddcc0f7a1624546f97c4a517	connect/api/src/main/java/org/apache/kafka/connect/data/Struct.java
    	// 129	public Long getInt64(String fieldName){
    	// 143	public Double getFloat64(String fieldName){
    	projectName = "kafka";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "connect/api/src/main/java/org/apache/kafka/connect/data/Struct.java";
    	shaId = "d0e436c471ba4122ddcc0f7a1624546f97c4a517";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP d0e436c471ba4122ddcc0f7a1624546f97c4a517		connect/api/src/main/java/org/apache/kafka/connect/data/Struct.java
    	// 136 public Float getFloat32(String fieldName){
    	projectName = "kafka";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "connect/api/src/main/java/org/apache/kafka/connect/data/Struct.java";
    	shaId = "d0e436c471ba4122ddcc0f7a1624546f97c4a517";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP WrongReturnType storm   Alive   eceb8ed797e7a528e074f3e45f63040428e0719b        external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/ZkInfo.java 67      public     Long getCommitIntervalMs(){
    	projectName = "storm";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "external/storm-kinesis/src/main/java/org/apache/storm/kinesis/spout/ZkInfo.java";
    	shaId = "eceb8ed797e7a528e074f3e45f63040428e0719b";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new WrongReturnType(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
