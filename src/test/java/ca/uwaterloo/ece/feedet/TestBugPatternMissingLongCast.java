package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.MissingLongCast;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternMissingLongCast {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	//String projectPathRoot2 = System.getProperty("user.home") + "/Documents/githubProjects/google"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";

    	int numOfTPs = 0;
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/Compactor.java	cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b
    	// -    long shippedCallSizeLimit = minFilesToCompact * HConstants.DEFAULT_BLOCKSIZE;
    	// +    long shippedCallSizeLimit = (long) minFilesToCompact * HConstants.DEFAULT_BLOCKSIZE;
    	
//    	String projectName = "hbase";
//    	String gitURI = projectPathRoot1 + File.separator + projectName;
//    	String path = "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/Compactor.java";
//    	String shaId = "cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b~1";
// 
//    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
//    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP hadoop  Alive   2273a74c1f3895163046cca09ff5e983df301d22        hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java
    	// 660     Math.ceil(reduceSlowStart * totalMaps)
    	String projectName = "hadoop";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java";
    	String shaId = "2273a74c1f3895163046cca09ff5e983df301d22";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// TODO This is TP but difficult to implement just for now
//    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java	cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b
//    	// -        in = new ThrottledInputStream(new BufferedInputStream(in), bandwidthMB * 1024 * 1024);
//    	// +        in = new ThrottledInputStream(new BufferedInputStream(in), bandwidthMB * 1024 * 1024L);
//    	projectName = "hbase";
//    	gitURI = projectPathRoot1 + File.separator + projectName;
//    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java";
//    	shaId = "cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b~1";
// 
//    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
//    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java	6e2df4c6172cc305d457177e3c9464ba7d83e2f0
    	// -    Threads.sleep(baseSleepBeforeRetries * sleepMultiplier);
    	// +    Threads.sleep((long)baseSleepBeforeRetries * sleepMultiplier);
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java";
    	shaId = "6e2df4c6172cc305d457177e3c9464ba7d83e2f0~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java	cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b
    	// +        in = new ThrottledInputStream(new BufferedInputStream(in), bandwidthMB * 1024 * 1024L);
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java";
    	shaId = "cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP MissingLongCast manifoldcf-integration-solr-3.x path_deleted    3ee0ace1ba6b9bff3ffaa278c0bba07e60064057d
    	// lucene/backwards/src/java/org/apache/lucene/util/RamUsageEstimator.java
    	// 174     ONE_GB=ONE_KKB * ONE_MB
    	projectName = "manifoldcf-integration-solr-3.x";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "lucene/src/java/org/apache/lucene/util/RamUsageEstimator.java";
    	shaId = "addd1bef5065d240ec653c971f1518e7102349c2";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP cassandra       Alive   d596a47cf1d2aaa8d1b4e98f886e0042a62cb9af
    	// src/java/org/apache/cassandra/utils/CoalescingStrategies.java   102     
    	// sleep=messages * averageGap
    	projectName = "cassandra";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/cassandra/utils/CoalescingStrategies.java";
    	shaId = "d596a47cf1d2aaa8d1b4e98f886e0042a62cb9af";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP flink	1e6f8f342d2fa1cdcc92efbfb552c66e60c78a06	610082d9788b5544b29bab9176f48eea1a45d940
    	// pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/CrossNode.java	224	
    	// estNumStubCalls=pred1.estimatedNumRecords * pred2.estimatedNumRecords
    	// difficult to track type of operands
    	projectName = "flink";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/CrossNode.java";
    	shaId = "610082d9788b5544b29bab9176f48eea1a45d940";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// TP hbase	d824f0b25fbeea555257dab7e5dca7e96e8f4666
    	// hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java
    	// +    this.bucketCapacity = FEWEST_ITEMS_IN_BUCKET * bigItemSize;
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java";
    	shaId = "d824f0b25fbeea555257dab7e5dca7e96e8f4666";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP drill	ca5a8476fb67d1c6b51472ddd48d7d51bbb3703b	0dd0e833714120c77e3e7ef34de654f5246953b9
    	// exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/columnreaders/NullableColumnReader.java	122
    	// rightBitShift is int
    	// rightBitShift+=dataTypeLengthInBits * nullsFound
    	projectName = "drill";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/columnreaders/NullableColumnReader.java";
    	shaId = "0dd0e833714120c77e3e7ef34de654f5246953b9";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FN lucene-solr	006bd17be203f36dc86f44a401f5c7f5713c4a69
    	// lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java
    	projectName = "lucene-solr";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java";
    	shaId = "006bd17be203f36dc86f44a401f5c7f5713c4a69";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 2;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FN lucene-solr	e2d3fe178776d3803b47d819b906e92156cd45b7
    	// src/java/org/apache/lucene/store/RAMInputStream.java
    	// 90     bufferStart = BUFFER_SIZE * currentBufferIndex;
    	// 103 bufferStart = BUFFER_SIZE * currentBufferIndex;
    	projectName = "lucene-solr";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/lucene/store/RAMInputStream.java";
    	shaId = "e2d3fe178776d3803b47d819b906e92156cd45b7~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 2;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
		// FP harmony-classlib	a313a2dcdad9cf154114e7e10ffc2d9bacfe02a7	371d12883609a89198390aefa2b794e40799c91f
    	// modules/luni/src/main/java/org/apache/harmony/luni/util/FloatingPointParser.java	445	
    	// exponent=expSign * Long.MAX_VALUE
    	projectName = "harmony-classlib";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "modules/luni/src/main/java/org/apache/harmony/luni/util/FloatingPointParser.java";
    	shaId = "371d12883609a89198390aefa2b794e40799c91f";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FN lucene-solr	5aaf587516b79c2553f82b4f019bf471c7d0733a	src/java/org/apache/lucene/index/DocumentsWriter.java 
    	// -    numBytesUsed -= numBlocks * BYTE_BLOCK_SIZE;
    	// +    numBytesUsed -= (end-start) * BYTE_BLOCK_SIZE;
    	projectName = "lucene-solr";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/lucene/index/DocumentsWriter.java";
    	shaId = "5aaf587516b79c2553f82b4f019bf471c7d0733a";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 6;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP commons-codec 20a88d9b49beda71ddee69af92872716fd00f13a	372c15eb25b6087d13bc4f107e9a048e69a2a478
    	// src/java/org/apache/commons/codec/binary/Base64.java	750	
    	// len+=(len / CHUNK_SIZE) * CHUNK_SEPARATOR.length
    	projectName = "commons-codec";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/commons/codec/binary/Base64.java";
    	shaId = "372c15eb25b6087d13bc4f107e9a048e69a2a478";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP commons-lang	371e866442f46131cc38a9a5018e1703f52f9b60	3a0c152c22b6e96fc809fdee2d6ea5b816a139e6
    	// src/main/java/org/apache/commons/lang3/math/Fraction.java	640
    	// m=((long)x) * ((long)y)
    	projectName = "commons-lang";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/main/java/org/apache/commons/lang3/math/Fraction.java";
    	shaId = "3a0c152c22b6e96fc809fdee2d6ea5b816a139e6";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP directory-server	Alive	7fbe6ad0dd894e1161a259cce549a46a40e67eab
    	// kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/replay/ReplayCacheImpl.java	55	
    	// DEFAULT_CLOCK_SKEW=5 * KerberosTime.MINUTE
    	projectName = "directory-server";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "kerberos-codec/src/main/java/org/apache/directory/server/kerberos/shared/replay/ReplayCacheImpl.java";
    	shaId = "7fbe6ad0dd894e1161a259cce549a46a40e67eab";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP roller	b4f4f360d8a74a277e2ac76cddc2f7912b9fc4c6	21c1f5e580bf88eb639c65599be1a9bf471aebc3	
    	// app/src/main/java/org/apache/roller/weblogger/ui/struts2/editor/MediaFileSearchBean.java	178	
    	// filterSize=this.size * 1024 // this.size is long
    	projectName = "roller";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "app/src/main/java/org/apache/roller/weblogger/ui/struts2/editor/MediaFileSearchBean.java";
    	shaId = "21c1f5e580bf88eb639c65599be1a9bf471aebc3";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP airavata	8acbfe8c5393f3f4b522e8a0a8fb7eb82e4205bb	a8d8f9a5fbc612db33c1191e2132c6da22246931	
    	// modules/registry/airavata-jpa-registry/src/main/java/org/apache/airavata/persistance/registry/jpa/impl/AiravataJPARegistry.java	169	
    	// Thread.sleep(CONNECT_FAIL_WAIT_TIME * 3)
    	projectName = "airavata";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "modules/registry/airavata-jpa-registry/src/main/java/org/apache/airavata/persistance/registry/jpa/impl/AiravataJPARegistry.java";
    	shaId = "a8d8f9a5fbc612db33c1191e2132c6da22246931";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP storm 21f365ea333d3a75eebce7bbb1e3a1ae68be8f86
    	// examples/storm-hdfs-examples/src/main/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java  116     
    	// Thread.sleep(seconds * 1000)
    	projectName = "storm";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "examples/storm-hdfs-examples/src/main/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java";
    	shaId = "21f365ea333d3a75eebce7bbb1e3a1ae68be8f86";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP ignite	d3ed7ff4ad8d403627d212aa7218fd7b0068996d	7e030c7cfa1d7d5df1897a9cdb01eea28423080d
    	// modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/shuffle/GridHadoopMultimap.java
    	// tblAddr=8 * (keyHash & (tblCap - 1))
    	projectName = "ignite";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/shuffle/GridHadoopMultimap.java";
    	shaId = "7e030c7cfa1d7d5df1897a9cdb01eea28423080d";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new MissingLongCast(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
