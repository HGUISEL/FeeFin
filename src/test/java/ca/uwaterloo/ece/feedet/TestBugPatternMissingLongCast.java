package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.MissingLongCast;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternMissingLongCast {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";

    	int numOfTPs = 0;
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/Compactor.java	cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b
    	// -    long shippedCallSizeLimit = minFilesToCompact * HConstants.DEFAULT_BLOCKSIZE;
    	// +    long shippedCallSizeLimit = (long) minFilesToCompact * HConstants.DEFAULT_BLOCKSIZE;
    	
    	String projectName = "hbase";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/Compactor.java";
    	String shaId = "cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 2;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java	cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b
    	// -        in = new ThrottledInputStream(new BufferedInputStream(in), bandwidthMB * 1024 * 1024);
    	// +        in = new ThrottledInputStream(new BufferedInputStream(in), bandwidthMB * 1024 * 1024L);
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java";
    	shaId = "cb17c7a97a1e2eb0ebd532f614191e4edbb9e49b~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java	6e2df4c6172cc305d457177e3c9464ba7d83e2f0
    	// -    Threads.sleep(baseSleepBeforeRetries * sleepMultiplier);
    	// +    Threads.sleep((long)baseSleepBeforeRetries * sleepMultiplier);
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionFileSystem.java";
    	shaId = "6e2df4c6172cc305d457177e3c9464ba7d83e2f0~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new MissingLongCast(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
