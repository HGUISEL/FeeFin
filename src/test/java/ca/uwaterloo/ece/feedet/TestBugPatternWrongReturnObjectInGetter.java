package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.WrongReturnObjectInGetter;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternWrongReturnObjectInGetter {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	String projectPathRoot2 = System.getProperty("user.home") + "/Documents/githubProjects/google"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	
    	int numOfTPs = 0;
    	
    	// TP 2ac48a14c9d2d440b57fbd94593c9080ac387094	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/FairSchedulerLeafQueueInfo.java
    	String projectName = "hadoop-common";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/FairSchedulerLeafQueueInfo.java";
    	String shaId = "2ac48a14c9d2d440b57fbd94593c9080ac387094";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 2;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP efeaf129890c2195b4753d5b9eece4f1b7cdf756 clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java
    	projectName = "kafka";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java";
    	shaId = "efeaf129890c2195b4753d5b9eece4f1b7cdf756";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP guava   73e382fa877f80994817a136b0adcc4365ccd904        guava/src/com/google/common/cache/LocalCache.java       1143    @Override public ReferenceEntry<K,V> getNextInAccessQueue(){
    	//return nextAccess;
    	projectName = "guava";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "guava/src/com/google/common/cache/LocalCache.java";
    	shaId = "73e382fa877f80994817a136b0adcc4365ccd904";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP 73e382fa877f80994817a136b0adcc4365ccd904             guava/src/com/google/common/collect/LinkedHashMultimap.java 361     @Override public Val     ueSetLink<K,V> getPredecessorInValueSet(){
    	projectName = "guava";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "guava/src/com/google/common/collect/LinkedHashMultimap.java";
    	shaId = "73e382fa877f80994817a136b0adcc4365ccd904";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP 5 ###     WrongReturnObjectInGetter       j2objc  Alive   277e7dcb5d90374ca61920b39f6dcc17250d3c03        xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/processor/XSLTAttributeDef.java
    	// 423     int getErrorType(){
    	//         return m_errorType;
    	projectName = "j2objc";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/processor/XSLTAttributeDef.java";
    	shaId = "277e7dcb5d90374ca61920b39f6dcc17250d3c03";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP j2objc  Alive   9632a061fd1c5df51a9940b8d5253967e5b59855        jre_emul/android/libcore/luni/src/main/java/java/io/ObjectStreamClass.java      950     
    	// public long getSerialVersionUID(){
    	// return svUID;
    	projectName = "j2objc";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "jre_emul/android/libcore/luni/src/main/java/java/io/ObjectStreamClass.java";
    	shaId = "9632a061fd1c5df51a9940b8d5253967e5b59855";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP
    	projectName = "guice";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "extensions/multibindings/src/com/google/inject/multibindings/OptionalBinder.java";
    	shaId = "c66f08e3d6798e88f35be51679854568f337e7eb";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP WrongReturnObjectInGetter	j2objc	Alive	b6cdfdb26fe2d60eb230c828fbeb92e297348f56	jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinPool.java	2619	
    	//  public static int getCommonPoolParallelism(){
    	//  return commonParallelism;
    	projectName = "j2objc";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "jre_emul/android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinPool.java";
    	shaId = "b6cdfdb26fe2d60eb230c828fbeb92e297348f56";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP WrongReturnObjectInGetter	science-journal	Alive	c555d8b7bb6bd0e2121f89f0d08a5371b32176cc	OpenScienceJournal/whistlepunk_library/src/main/java/com/google/android/apps/forscience/whistlepunk/api/scalarinput/InputDeviceSpec.java	55	@Override public String getProviderId(){
    	//  return PROVIDER_ID;
    	projectName = "science-journal";
    	gitURI = projectPathRoot2 + File.separator + projectName;
    	path = "OpenScienceJournal/whistlepunk_library/src/main/java/com/google/android/apps/forscience/whistlepunk/api/scalarinput/InputDeviceSpec.java";
    	shaId = "c555d8b7bb6bd0e2121f89f0d08a5371b32176cc";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new WrongReturnObjectInGetter(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
