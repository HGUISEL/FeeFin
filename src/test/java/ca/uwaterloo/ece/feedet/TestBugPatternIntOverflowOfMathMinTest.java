package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.IntOverflowOfMathMin;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternIntOverflowOfMathMinTest {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	
    	int numOfTPs = 0;
    	
    	// TP 5128a9a453d64bfe1ed978cf9ffed27985eeef36	src/java/org/apache/hadoop/fs/s3/S3InputStream.java
    	String projectName = "hadoop-common";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "src/java/org/apache/hadoop/fs/s3/S3InputStream.java";
    	String shaId = "5128a9a453d64bfe1ed978cf9ffed27985eeef36";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP 
    	projectName = "hadoop-common";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/hadoop/fs/s3/S3InputStream.java";
    	shaId = "2855b21e0c40668c0cc5fa2efd2fb3cc2a25996e";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP 
    	projectName = "incubator-blur";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "blur-command/src/main/java/org/apache/blur/command/TermsCommand.java";
    	shaId = "1cb5110c049058bf2a49a3a0470e2deca17a7df3";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP 
    	projectName = "commons-compress";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java";
    	shaId = "785233a6fe47009e8b92db72e778f7932db978cd";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP
        // ### IntOverflowOfMathMin    hadoop  0b7b8a377611b2a3041a2995504a437c36dfa6e6        c6f2d761d5430eac6b9f07f137a7028de4e0660c        hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/UncompressedSplitLineReader.java      59      maxBytesToRead=Math.min(maxBytesToRead,(int)leftBytesForSplit)
        //	    maxBytesToRead=Math.min(maxBytesToRead,(int)leftBytesForSplit) 
    	projectName = "hadoop";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/UncompressedSplitLineReader.java";
    	shaId = "c6f2d761d5430eac6b9f07f137a7028de4e0660c";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());

    	// TP
        // ### IntOverflowOfMathMin    strut1 6eb4c6c1e79d6970aef854c83d77fff2e642f474
    	//  src/share/org/apache/struts/upload/BufferedMultipartInputStream.java
    	// int length = Math.min(bufferSize, (((int) contentLength+1) - totalLength))
    	// casting is in (...)
    	projectName = "struts1";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/share/org/apache/struts/upload/BufferedMultipartInputStream.java";
    	shaId = "6eb4c6c1e79d6970aef854c83d77fff2e642f474";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs+=2;
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new IntOverflowOfMathMin(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
