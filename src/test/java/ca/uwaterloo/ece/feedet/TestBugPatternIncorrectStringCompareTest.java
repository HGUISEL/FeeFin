package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.IncorrectStringCompare;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternIncorrectStringCompareTest {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";
    	
    	int numOfTPs = 0;
    	
    	// TP 5128a9a453d64bfe1ed978cf9ffed27985eeef36	src/java/org/apache/hadoop/fs/s3/S3InputStream.java
    	String projectName = "hadoop-common";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueuePlacementRule.java";
    	String shaId = "95e0d5699923ed4b4d2bcd638da0e038b118a50a";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP flink	f74cb0a988b187d230d31f532bdbb49fd8452378	6cf15c29b1bf3bb3ddcf69157079f9e5b185d9c8	flink-addons/flink-streaming/flink-streaming-connectors/src/main/java/org/apache/flink/streaming/connectors/twitter/TwitterStreaming.java
    	projectName = "flink";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "flink-addons/flink-streaming/flink-streaming-connectors/src/main/java/org/apache/flink/streaming/connectors/twitter/TwitterStreaming.java";
    	shaId = "6cf15c29b1bf3bb3ddcf69157079f9e5b185d9c8";
    	 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FN tomcat c2bb10061db0145d3e14e2e9441e76e6c14dfa07~1 java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
    	// String value in field access e.g., if (Lifecycle.START_EVENT == event.getType()) {
    	projectName = "tomcat";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java";
    	shaId = "c2bb10061db0145d3e14e2e9441e76e6c14dfa07~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FN tomcat c2bb10061db0145d3e14e2e9441e76e6c14dfa07~1 java/org/apache/catalina/startup/HostConfig.java
    	// String from a method call return value access e.g., if (event.getType() == Lifecycle.AFTER_STOP_EVENT) {
    	projectName = "tomcat";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java";
    	shaId = "c2bb10061db0145d3e14e2e9441e76e6c14dfa07~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new IncorrectStringCompare(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
