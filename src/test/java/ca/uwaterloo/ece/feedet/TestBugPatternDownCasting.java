package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.DownCasting;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternDownCasting {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; //System.getProperty("user.home") + "/X"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";

    	int numOfTPs = 0;
    	
    	// TP src/java/org/apache/hadoop/hbase/io/BlockFSInputStream.java	ad3c964f421de5c3bd86d7032859753e1d589252
    	// -    int targetBlock = (int) (target / blockSize);
    	// +    long targetBlock = target/blockSize;
    	String projectName = "hbase";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "src/java/org/apache/hadoop/hbase/io/BlockFSInputStream.java";
    	String shaId = "ad3c964f421de5c3bd86d7032859753e1d589252~1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP nutch   Alive   e53b34b2322f2d071981a72577644a225642ecbc        
    	// src/java/org/apache/nutch/fetcher/FetcherThread.java    735     
    	// int maxOutlinksByDepth=(int)Math.floor(outlinksDepthDivisor / (outlinkDepth + 1) * maxOutlinkDepthNumLinks);
    	projectName = "nutch";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/nutch/fetcher/FetcherThread.java";
    	shaId = "e53b34b2322f2d071981a72577644a225642ecbc";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// TP kafka   Alive   e36e8079d8a005550c5281ecebb4b7b622cc41b1        
    	// clients/src/main/java/org/apache/kafka/common/record/MemoryRecords.java 51      
    	// int pos=(int)position;
    	projectName = "kafka";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "clients/src/main/java/org/apache/kafka/common/record/MemoryRecords.java";
    	shaId = "e36e8079d8a005550c5281ecebb4b7b622cc41b1";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(++numOfTPs,identifiedPotentialBug.size());
    	
    	// FP zeppelin        Alive   2fe5a00857bd06a2d6c7691f245e4c0c00b3b051        
    	// zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java    1030    
    	// int cursor=(int)Double.parseDouble(fromMessage.get("cursor").toString());
    	projectName = "zeppelin";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java";
    	shaId = "2fe5a00857bd06a2d6c7691f245e4c0c00b3b051";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// flink   Alive   27ebdf7acde0e2c3ad183503d0588ca91e63d729        
    	// flink-yarn/src/main/java/org/apache/flink/yarn/cli/FlinkYarnSessionCli.java     361     
    	// int slotsPerTM=(int)Math.ceil((double)userParallelism / yarnClusterDescriptor.getTaskManagerCount());
    	projectName = "flink";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "flink-yarn/src/main/java/org/apache/flink/yarn/cli/FlinkYarnSessionCli.java";
    	shaId = "27ebdf7acde0e2c3ad183503d0588ca91e63d729";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP zookeeper       Alive   73e102a58d01b27bc6208bbfbde2d12f0deba1f4        
    	// src/java/main/org/apache/zookeeper/ClientCnxn.java      1203    
    	// int idlePingRwServer=(int)(now - lastPingRwServer);
    	projectName = "zookeeper";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/main/org/apache/zookeeper/ClientCnxn.java";
    	shaId = "73e102a58d01b27bc6208bbfbde2d12f0deba1f4";
    	
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP hbase   Alive   efc7edc81a0d9da486ca37b8314baf5a7e75bc86        
    	// hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java   410     
    	// int processingTime=(int)(endTime - startTime);
    	// ignore minus computation
    	projectName = "hbase";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java";
    	shaId = "efc7edc81a0d9da486ca37b8314baf5a7e75bc86";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP kafka   Alive   67f1e5b91bf073151ff57d5d656693e385726697        
    	// clients/src/main/java/org/apache/kafka/common/record/FileRecords.java   435     
    	// int result=(int)(offset ^ (offset >>> 32)); 
    	projectName = "kafka";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "clients/src/main/java/org/apache/kafka/common/record/FileRecords.java";
    	shaId = "67f1e5b91bf073151ff57d5d656693e385726697";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP Alive   ca80968e039382b8def51adb2a4520e76c89f7fb        
    	// ql/src/java/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/VectorMapJoinFastBytesHashTable.java     65      
    	// int intHashCode=(int)hashCode;
    	// intentionally down caseted
    	projectName = "hive";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "ql/src/java/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/VectorMapJoinFastBytesHashTable.java";
    	shaId = "ca80968e039382b8def51adb2a4520e76c89f7fb";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP hadoop	Alive	aebb9127bae872835d057e1c6a6e6b3c6a8be6cd	
    	// hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java	333	
    	// int slotIdx=(int)(m % MINUTES_PER_HOUR);
    	// ignore cases that use %
    	projectName = "hadoop";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java";
    	shaId = "aebb9127bae872835d057e1c6a6e6b3c6a8be6cd";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    	
    	// FP mahout	Alive	c9ee7282d0c695a6eb76dda9590a5386309c758a	
    	// mr/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java	104	
    	// int label=(int)dataset.getLabel(instance);
    	// method returns double
    	projectName = "mahout";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "mr/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java";
    	shaId = "c9ee7282d0c695a6eb76dda9590a5386309c758a";
 
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(numOfTPs,identifiedPotentialBug.size());
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);
			
			process(prjName,new DownCasting(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getLineNum() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
