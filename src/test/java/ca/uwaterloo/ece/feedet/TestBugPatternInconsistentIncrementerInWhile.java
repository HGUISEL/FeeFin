package ca.uwaterloo.ece.feedet;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.junit.Test;

import ca.uwaterloo.ece.feedet.DetectionRecord;
import ca.uwaterloo.ece.feedet.bugpatterns.InconsistentIncrementerInWhile;
import ca.uwaterloo.ece.feedet.utils.JavaASTParser;
import ca.uwaterloo.ece.feedet.utils.Utils;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class TestBugPatternInconsistentIncrementerInWhile {
	
	HashSet<DetectionRecord> identifiedPotentialBug = new HashSet<DetectionRecord>();
	
    @Test public void testSomeLibraryMethod() {
    	
    	String projectPathRoot1 = System.getProperty("user.home") + "/Documents/githubProjects/apache"; // "/Volumes/Faith/githubProjects/apache"; //System.getProperty("user.home") + "/Documents/githubProjects/apache";

    	int numOfTPs = 0;
    	
    	// TP hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java	e7c1acfecc3aad09db8160906b8f4de346d0f5e7
    	String projectName = "hbase";
    	String gitURI = projectPathRoot1 + File.separator + projectName;
    	String path = "hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java"; //	
    	String shaId = "e7c1acfecc3aad09db8160906b8f4de346d0f5e7~1";
        
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	numOfTPs += 2;
    	assertEquals(identifiedPotentialBug.size(),numOfTPs);
    	
    	// FP cassandra       Alive   7d266b9e79e0738df25e4f86b5bdccb030a02d88        src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java
    	// 379     while (futures.size() > MAX_OUTSTANDING_REPLAY_COUNT || pendingMutationBytes > MAX_OUTSTANDING_REPLAY_BYTES || (!futures.isEmpty() && futures.peek().isDone())) {
    	projectName = "cassandra";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java"; //	
    	shaId = "7d266b9e79e0738df25e4f86b5bdccb030a02d88";
        
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(identifiedPotentialBug.size(),numOfTPs);
    	
    	// FP incubator-joshua        d8c4986e46bf289be2c76a96b7fd584eff0f9e0a        caa8a0c6122f80d44e1846afd80b8c984e3ac1ff        src/joshua/corpus/syntax/ArraySyntaxTree.java
    	// 104     while (!nt_stack.isEmpty() && labels.size() < MAX_LABELS) {
    	projectName = "incubator-joshua";
    	gitURI = projectPathRoot1 + File.separator + projectName;
    	path = "src/joshua/corpus/syntax/ArraySyntaxTree.java"; //	
    	shaId = "caa8a0c6122f80d44e1846afd80b8c984e3ac1ff";
        
    	detect(projectName,gitURI, path, shaId,identifiedPotentialBug);
    	assertEquals(identifiedPotentialBug.size(),numOfTPs);
    	
    }

	private void detect(String prjName, String gitURI, String path, String shaId,HashSet<DetectionRecord> identifiedPotentialBug) {
		try {
    		Git git;
			git = Git.open( new File(gitURI) );
			Repository repo = git.getRepository();
			
			String fileSource=Utils.fetchBlob(repo, shaId, path);
			
			fileSource = Utils.removeComments(fileSource);
			
			JavaASTParser preFixWholeCodeAST = new JavaASTParser(fileSource);

			process(prjName,new InconsistentIncrementerInWhile(prjName,preFixWholeCodeAST,shaId,path,repo).detect());
			
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void process(String projectName,ArrayList<DetectionRecord> detectionRecords) {
		for(DetectionRecord detRec:detectionRecords){
			if(!identifiedPotentialBug.contains(detRec)){
				identifiedPotentialBug.add(detRec);
				System.out.println(detRec.getPatternName() + "\t" 
						+ projectName + "\t"
						+ detRec.getRevID() + "\t"
						+ detRec.getPath());
				System.out.println(detRec.getCode() + "\n");
			}
		}
		
	}
}
